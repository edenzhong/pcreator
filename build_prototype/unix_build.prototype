function help()
{
	echo "build.bat [debug|release|run|gdb|test|update|help]"
	echo ""
	echo "debug       : build a debug exectuion."
	echo "release     : build a release execution."
	echo "run         : run the project."
	echo "gdb         : use gdb to debug the project."
	echo "test        : run the test."
	echo "update      : update cmake files. used when new source file or"
	echo "              configuration changed in the project."
	echo "newfile     : create new src file in src/src, src/inc and test."
	echo "              this option should be the last option, because it"
	echo "              threats any words afterward as a file name."
	echo "rmfile      : remove the src file in src/src, src/inc and test."
	echo "              this option should be the last option, because it"
	echo "              threats any words afterward as a file name."
	echo "help        : print this help."
	echo ""
	echo "if no option is given, debug will be the default one."
}

function create_new_file()
{
	while [ x$1 != x ]; do
		touch inc/$1.h
		echo "#include \"$1.h\"">src/$1.cpp
		echo "#include \"gtest/gtest.h\"">test/$1_test.cpp
		echo "#include \"$1.h\"">>test/$1_test.cpp

		shift
	done
}
function rm_file()
{
	while [ x$1 != x ]; do
		rm inc/$1.h
		rm src/$1.cpp
		rm test/$1_test.cpp
		shift
	done
}

BUILD_TYPE="nil"
RUN_DEBUG="nil"
TO_TEST=0
TO_UPDATE=0
TO_CLEAN=0

if [ x$1 == x ]; then
	BUILD_TYPE="debug"
else
	while [ x$1 != x ]; do
		arg=$1
		shift

		if [ $arg == "debug" ]; then
			BUILD_TYPE="debug"
		elif [ $arg == "release" ]; then
			BUILD_TYPE="release"
		elif [ $arg == "run" ]; then
			RUN_DEBUG="run"
		elif [ $arg == "gdb" ]; then
			RUN_DEBUG="debug"
		elif [ $arg == "test" ]; then
			TO_TEST=1
		elif [ $arg == "update" ]; then
			TO_UPDATE=1
		elif [ $arg == "clean" ]; then
			TO_CLEAN=1
		elif [ $arg == "newfile" ]; then
			create_new_file $@
			break
		elif [ $arg == "rmfile" ]; then
			rm_file $@
			break
		else
			help
			exit 1;
		fi
	done
fi

# handle actions
if [ $TO_UPDATE -eq 1 ] ; then
	echo "to update cmake"
	if [ ! -d debug ]; then
		mkdir debug
	fi
	cd debug
	cmake -DCMAKE_BUILD_TYPE=Debug -DPRJ_NAME=$PRJ_NAME ..
	cd ..
	if [ ! -d release ]; then
		mkdir release
	fi
	cd release
	cmake -DCMAKE_BUILD_TYPE=Release -DPRJ_NAME=$PRJ_NAME ..
	cd ..
fi

if [ $TO_CLEAN == 1 ]; then
	cd debug
	make clean
	cd ../release
	make clean
	cd ..
fi


if [ $BUILD_TYPE == "debug" ] ; then
	echo "to build debug"
	cd debug
	make
fi

if [ $BUILD_TYPE == "release" ] ; then
	echo "to build release"
	cd release
	make
fi

if [ $RUN_DEBUG == "run" ];then
	echo "to run"
	if [ $BUILD_TYPE == "nil" ] ; then
		cd debug # default run the debug version
	fi
	./$PRJ_NAME
fi

if [ $RUN_DEBUG == "debug" ];then
	echo "to debug"
	if [ $BUILD_TYPE == "nil" ] ; then
		cd debug # default run the debug version
	fi
	cgdb $PRJ_NAME
	#gdb $PRJ_NAME
fi

if [ $TO_TEST == 1 ] ; then
	echo "run unit test"
	if [ $BUILD_TYPE == "nil" ] ; then
		cd debug # default run the debug version
	fi
	./${PRJ_NAME}_test
fi

exit 0

